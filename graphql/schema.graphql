schema {
  query: Query
  mutation: Mutation
}

type Query {
  # Get resources with relationships
  getResource(id: ID!): Resource
  getResourcesByType(type: ResourceType!): [Resource!]!
  
  # Confidence-based queries
  getResourcesByConfidence(minConfidence: Float!): [Resource!]!
  getConflictedRelationships: [Relationship!]!
  getRelationshipsBySource(source: String!): [Relationship!]!
  
  # Search and discovery
  searchResources(text: String!): [Resource!]!
  searchResourcesByOwner(owner: String!): [Resource!]!
  
  # Analytics
  getOwnershipCoverage: OwnershipStats!
  getConfidenceDistribution: ConfidenceStats!
}

type Mutation {
  # Manual relationship management
  createRelationship(input: CreateRelationshipInput!): Relationship!
  updateRelationshipConfidence(id: ID!, confidence: Float!): Relationship!
  resolveConflict(id: ID!, winnerId: ID!): Relationship!
  
  # Bulk operations
  approveRelationships(ids: [ID!]!): [Relationship!]!
  rejectRelationships(ids: [ID!]!): [Relationship!]!
}

# Core types
type Resource {
  id: ID!
  name: String!
  type: ResourceType!
  description: String
  tags: [Tag!]!
  relationships: [Relationship!]!
  owners: [User!]!
  createdAt: String!
  updatedAt: String!
  metadata: AWSJSON
}

type User {
  id: ID!
  name: String!
  email: String
  team: String
  department: String
  resources: [Resource!]!
  relationshipCount: Int!
}

type Relationship {
  id: ID!
  from: User!
  to: Resource!
  type: RelationshipType!
  confidence: Float!
  confidenceLevel: ConfidenceLevel!
  source: String!
  hasConflict: Boolean!
  conflictsWith: [Relationship!]
  lastValidated: String!
  createdAt: String!
  updatedAt: String!
  metadata: AWSJSON
}

type Tag {
  key: String!
  value: String!
}

# Analytics types
type OwnershipStats {
  totalResources: Int!
  ownedResources: Int!
  unownedResources: Int!
  coveragePercentage: Float!
  byResourceType: [ResourceTypeStats!]!
  byTeam: [TeamStats!]!
}

type ResourceTypeStats {
  type: ResourceType!
  total: Int!
  owned: Int!
  coverage: Float!
}

type TeamStats {
  team: String!
  resourceCount: Int!
  averageConfidence: Float!
}

type ConfidenceStats {
  high: Int!     # >= 0.8
  medium: Int!   # 0.6 - 0.79
  low: Int!      # 0.4 - 0.59
  veryLow: Int!  # < 0.4
  averageConfidence: Float!
  distributionBySource: [SourceConfidenceStats!]!
}

type SourceConfidenceStats {
  source: String!
  count: Int!
  averageConfidence: Float!
}

# Input types
input CreateRelationshipInput {
  fromUserId: ID!
  toResourceId: ID!
  type: RelationshipType!
  confidence: Float
  source: String
  metadata: AWSJSON
}

# Enums
enum ResourceType {
  AWS_RESOURCE
  GITHUB_REPOSITORY
  KUBERNETES_SERVICE
  DATABASE
  API_ENDPOINT
  DOCUMENTATION
  APPLICATION
  INFRASTRUCTURE
}

enum RelationshipType {
  OWNS
  MAINTAINS
  CONTRIBUTES_TO
  MANAGES
  DEPLOYS
  MONITORS
}

enum ConfidenceLevel {
  VERY_HIGH    # >= 0.9
  HIGH         # 0.8 - 0.89
  MEDIUM       # 0.6 - 0.79
  LOW          # 0.4 - 0.59
  VERY_LOW     # < 0.4
  DISPUTED     # Has conflicts
}

# Scalar types
scalar AWSJSON