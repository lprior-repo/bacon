name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.24.5"
  NODE_VERSION: "20"
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  # Core application jobs - will migrate to reusable workflows once established
  ci:
    strategy:
      fail-fast: false
      matrix:
        task: [build, test, lint]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: |
          go.sum
          src/**/go.sum

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g nx@21
        npx nx --version
        go install github.com/magefile/mage@latest
        # Install latest golangci-lint for Go 1.24.5 compatibility
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest

    - name: Tidy Go modules
      run: |
        echo "üì¶ Tidying Go modules..."
        npx nx run bacon:mod-tidy

    # BUILD TASK
    - name: Build all Lambda functions
      if: matrix.task == 'build'
      run: |
        echo "üöÄ Building all Lambda functions with parallel execution..."
        find src -name "main.go" -path "*/lambda/*" | while read -r main_file; do
          dir=$(dirname "$main_file")
          name=$(basename "$dir")
          echo "Building Lambda: $name"
          cd "$dir"
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags='-s -w' -o main .
          echo "‚úÖ Built $name"
          cd - > /dev/null
        done
        echo "üéâ All Lambda functions built successfully!"

    # TEST TASK  
    - name: Run all tests
      if: matrix.task == 'test'
      run: |
        echo "üß™ Running all tests with NX orchestration..."
        npx nx run bacon:test

    # LINT TASK
    - name: Run all linting
      if: matrix.task == 'lint'
      run: |
        echo "üîç Running all linting with NX orchestration..."
        npx nx run bacon:lint

  # Terraform jobs using NX
  terraform:
    strategy:
      fail-fast: false
      matrix:
        task: [format-check, validate, security-scan]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 'latest'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g nx@21
        npx nx --version

    - name: Install Checkov (for security scanning)
      if: matrix.task == 'security-scan'
      run: |
        pip3 install checkov

    - name: Run Terraform task
      run: |
        case "${{ matrix.task }}" in
          "format-check")
            echo "üé® Checking Terraform formatting..."
            npx nx run terraform:format-check
            ;;
          "validate")
            echo "üîß Initializing and validating Terraform..."
            npx nx run terraform:initialize
            npx nx run terraform:validate
            ;;
          "security-scan")
            echo "üîç Running security scan..."
            npx nx run terraform:security-scan
            ;;
        esac

  # Mutation testing job - runs after CI passes
  mutation-testing:
    runs-on: ubuntu-latest
    needs: [ci]
    if: ${{ needs.ci.result == 'success' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: |
          go.sum
          src/**/go.sum

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g nx@21
        npx nx --version
        go install github.com/magefile/mage@latest
        go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest

    - name: Tidy Go modules
      run: |
        echo "üì¶ Tidying Go modules..."
        npx nx run bacon:mod-tidy

    - name: Run mutation testing
      run: |
        echo "üß¨ Running mutation testing with 95% threshold..."
        npx nx run bacon:test-mutation

    - name: Upload mutation test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mutation-test-results
        path: mutation-results/
        retention-days: 30

  # Consolidation job to ensure all jobs succeeded
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [ci, terraform, mutation-testing]
    if: always()
    steps:
    - name: Check all jobs succeeded
      run: |
        if [[ "${{ needs.ci.result }}" != "success" || "${{ needs.terraform.result }}" != "success" || "${{ needs.mutation-testing.result }}" != "success" ]]; then
          echo "‚ùå CI pipeline failed!"
          exit 1
        fi
        echo "‚úÖ All CI tasks completed successfully with NX + Terraform + Mutation Testing integration!"