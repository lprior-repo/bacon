name: Fast CI with Multiple Agents

on:
  push:
    branches: [main]

env:
  GO_VERSION: "1.23"
  NODE_VERSION: "20"
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  # Matrix strategy with multiple agents for maximum parallelism
  ci:
    strategy:
      fail-fast: false
      matrix:
        task: [build, test, lint]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: |
          go.sum
          src/**/go.sum

    - name: Setup Node.js (if needed)
      if: matrix.task == 'build' || matrix.task == 'lint'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ "${{ matrix.task }}" = "build" ] || [ "${{ matrix.task }}" = "lint" ]; then
          npm ci
        fi
        go install github.com/magefile/mage@latest

    - name: Tidy Go modules
      run: |
        go mod tidy
        find src -name "go.mod" -execdir go mod tidy \;

    # BUILD TASK
    - name: Build all projects with NX
      if: matrix.task == 'build'
      run: |
        echo "üöÄ Building all projects with NX orchestration..."
        nx run bacon:build-all

    # TEST TASK  
    - name: Run all tests with NX
      if: matrix.task == 'test'
      run: |
        echo "üß™ Running all tests with NX orchestration..."
        nx run bacon:test-all

    # LINT TASK
    - name: Run all linting with NX
      if: matrix.task == 'lint'
      run: |
        echo "üîç Running all linting with NX orchestration..."
        nx run bacon:lint-all

    - name: Upload security results
      if: matrix.task == 'lint' && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-report.sarif

  # Consolidation job to ensure all matrix jobs succeeded
  ci-success:
    runs-on: ubuntu-latest
    needs: [ci]
    if: always()
    steps:
    - name: Check all jobs succeeded
      run: |
        if [ "${{ needs.ci.result }}" != "success" ]; then
          echo "‚ùå CI pipeline failed!"
          exit 1
        fi
        echo "‚úÖ All CI tasks completed successfully with maximum parallelism!"